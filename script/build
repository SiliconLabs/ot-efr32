#!/bin/bash
#
#  Copyright (c) 2020, The OpenThread Authors.
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#  3. Neither the name of the copyright holder nor the
#     names of its contributors may be used to endorse or promote products
#     derived from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.
#

set -euxo pipefail


# ==============================================================================
# Bash definitions
if [[ -n ${BASH_SOURCE[0]} ]]; then
    script_path="${BASH_SOURCE[0]}"
else
    script_path="$0"
fi

script_dir="$(dirname "$(realpath "$script_path")")"
repo_dir="$(dirname "$script_dir")"
board="brdXXXXY"

# shellcheck source=script/efr32-definitions
source "$script_dir/efr32-definitions"

# Define slc_cmd
slc_path="${repo_dir}/third_party/silabs/slc/slc_cli/bin/slc-cli/"
export slc_cmd
if command -v slc-cli; then
    slc_cmd="slc-cli"
    slc_dir=$(dirname $(which "${slc_cmd}"))
elif command -v slc; then
    slc_cmd="slc"
    slc_dir=$(dirname $(which "${slc_cmd}"))
else
    echo "The 'slc-cli' command could not be found in your PATH."
    if ! command -v "${slc_path}/slc-cli"; then
        echo "slc-cli has not been installed yet. Please run ./script/bootstrap"
        exit
    else
        slc_cmd="${slc_path}/slc-cli"
    fi
fi
slc_version=$(head -n 1 "${slc_dir}"/latest_version)
slc_exporter_templates_dir="${slc_dir}"/uc_cli_downloads/"${slc_version}"/slc_cli/bin/slc-cli/developer/exporter_templates/arm_gcc


# Wrapper function to execute an slc command
run_slc()
{
    mycmd=("${slc_cmd}" ${@})
    "${mycmd[@]}"
}

# ==============================================================================
OT_CMAKE_NINJA_TARGET=${OT_CMAKE_NINJA_TARGET:-}

readonly OT_OPTIONS=(
    "-DCMAKE_BUILD_TYPE=Debug"
    "-DOT_DIAGNOSTIC=ON"
    "-DOT_EXTERNAL_HEAP=ON"
    "-DOT_SLAAC=ON"
)

die()
{
    echo " ** ERROR: $1"
    exit 1
}

inject_templates()
{
    local custom_templates_dir=$1

    # Make a backup of existing templates
    echo "Backing up ${slc_exporter_templates_dir}"
    cp -R \
        "${slc_exporter_templates_dir}/" \
        "${slc_exporter_templates_dir}_backup/"

    # Inject templates
    echo "Injecting custom exporter templates"
    cp ${custom_templates_dir}/custom.Makefile ${slc_exporter_templates_dir}/arm_gcc.Makefile
    cp ${custom_templates_dir}/custom.project.mak ${slc_exporter_templates_dir}/arm_gcc.project.mak
    cp ${custom_templates_dir}/macros.jinja ${slc_exporter_templates_dir}/
}

restore_templates()
{
    echo "Restoring original slc exporter templates"
    rm -rf "${slc_exporter_templates_dir}"
    cp -R \
        "${slc_exporter_templates_dir}_backup/" \
        "${slc_exporter_templates_dir}/"
}

build()
{
    builddir="${OT_CMAKE_BUILD_DIR:-$repo_dir/build/${platform}}"

    mkdir -p "${builddir}"
    cd "${builddir}"

    if [ "${skip_generation}" = false ]; then
        local generated_project_path=${builddir}/slc
        local sdk_dir=${repo_dir}/third_party/silabs/gecko_sdk/

        # TODO: This will change once IOTREQ-4050 is completed
        inject_templates ${repo_dir}/third_party/silabs/slc/exporter_templates/platform
        run_slc -v 1 generate \
            --sdk=${sdk_dir} \
            --clear-cache \
            --project-file=${repo_dir}/third_party/silabs/gecko_sdk/protocol/openthread/sample-apps/ot-efr32/ot-efr32.slcp \
            --output-type=makefile \
            --no-copy \
            --export-destination=${generated_project_path}/platform \
            --with ${board}
        restore_templates

        # TODO: Remove this when slc supports generic jinja template generation
        mv ${generated_project_path}/platform/ot-efr32.Makefile ${generated_project_path}/platform/CMakeLists.txt
        mv ${generated_project_path}/platform/ot-efr32.project.mak ${generated_project_path}/platform/silabs-efr32-sdk.cmake

        inject_templates ${repo_dir}/third_party/silabs/slc/exporter_templates/mbedtls
        run_slc -v 1 generate \
            --sdk=${sdk_dir} \
            --clear-cache \
            --project-file=${repo_dir}/third_party/silabs/gecko_sdk/protocol/openthread/sample-apps/ot-efr32/mbedtls.slcp \
            --output-type=makefile \
            --no-copy \
            --export-destination=${generated_project_path}/mbedtls \
            --with ${board}
        restore_templates

        mv ${generated_project_path}/mbedtls/ot-efr32-mbedtls.Makefile ${generated_project_path}/mbedtls/CMakeLists.txt
        rm -rf ${generated_project_path}/mbedtls/{autogen,config}
    fi

    cmake -GNinja -DOT_COMPILE_WARNING_AS_ERROR=ON "$@" "${repo_dir}"

    if [[ -n ${OT_CMAKE_NINJA_TARGET[*]} ]]; then
        ninja "${OT_CMAKE_NINJA_TARGET[@]}"
    else
        ninja
    fi

    cd "${repo_dir}"
}

create_srec()
{
    local executable_flag

    if [ "$(uname)" = 'Linux' ]; then
        executable_flag=(-executable)
    elif [ "$(uname)" = 'Darwin' ]; then
        executable_flag=(-perm +111)
    fi

    find "$1" -type f "${executable_flag[@]}" -not -name '*.*' -exec arm-none-eabi-objcopy -O srec {} {}.s37 \; -exec ls -alh {} {}.s37 \;
}

cleanup() {
    restore_templates
}

trap cleanup EXIT

main()
{
    local usage="usage: $0 [-h] [--skip-silabs-apps] <efr32 platform> -DBOARD=<brdXXXXy> [-D<OT_XXXX=ON> -D<OT_YYYY=OFF>]"

    local skip_silabs_apps=false
    skip_generation=false
    # Parse flags
    optspec=":h-:"
    while getopts "$optspec" optchar; do
        case "${optchar}" in
            -)
                case "${OPTARG}" in
                    skip-generation)
                        printf '\n\nSkipping SLC generation...\n\n' >&2
                        skip_generation=true
                        shift 1
                        ;;
                    skip-silabs-apps)
                        printf '\n\nSkipping silabs example apps...\n\n' >&2
                        skip_silabs_apps=true
                        shift 1
                        ;;
                    *)
                        echo "Unknown option --${OPTARG}" >&2
                        exit 2
                        ;;
                esac
                ;;
            h)
                echo "${usage}" >&2
                exit 2
                ;;
        esac
    done

    local efr32_platforms
    efr32_platforms=$(efr32_get_platforms)

    if [[ $# == 0 ]]; then
        printf "Please specify a platform.\n\nValid platforms:   %s\n\nUsage:\n\t%s <efr32_platform> -DBOARD=<efr32_board>\n" "$efr32_platforms" "$(basename "$0")" >&2
        exit 1
    fi

    local platform="$1"
    efr32_check_platform "${platform}" || die "Unsupported platform ${platform}"
    shift

    local options=("${OT_OPTIONS[@]}")

    options+=("-DCMAKE_TOOLCHAIN_FILE=src/${platform}/arm-none-eabi.cmake")

    case "${platform}" in
        efr32mg1)
            OT_CMAKE_NINJA_TARGET=("ot-rcp")
            ;;
        efr32mg12 | efr32mg13 | efr32mg21 | efr32mg24)
            OT_CMAKE_NINJA_TARGET=("ot-cli-ftd")
            # OT_CMAKE_NINJA_TARGET=("ot-rcp" "ot-cli-ftd" "ot-cli-mtd" "ot-ncp-ftd" "ot-ncp-mtd")
            # if [ "${skip_silabs_apps}" = false ]; then
            #     OT_CMAKE_NINJA_TARGET+=("sleepy-demo-ftd" "sleepy-demo-mtd")
            # fi
            ;;
    esac

    lowercase_args=$(echo $@ | tr '[:upper:]' '[:lower:]')
    board=$([[ "${lowercase_args}" =~ (brd[0-9]{4}[a-z]{1}) ]] && echo ${BASH_REMATCH[1]})
    echo ${board}

    options+=("$@")
    build -DEFR32_PLATFORM="${platform}" "${options[@]}"
    create_srec "${builddir}"
}

main "$@"
